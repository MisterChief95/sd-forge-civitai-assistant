from __future__ import annotations
from enum import Enum
from pydantic import BaseModel, Field, ConfigDict
from typing import List, Optional, Any


class MetadataDescriptor(BaseModel):
    hash: Optional[str] = None
    id: Optional[int] = None
    modelId: Optional[int] = None
    description: Optional[str] = None
    sd_version: str = Field(default="Other", alias="sd version")
    activation_text: str = Field(default="", alias="activation text")
    preferred_weight: float = Field(default=0, alias="preferred weight")
    negative_text: str = Field(default="", alias="negative text")
    notes: Optional[str] = ""


class ModelType(str, Enum):
    CHECKPOINT = "Checkpoint"
    LORA = "LoRA/LyCORIS/DoRA"
    TEXTUAL_INVERSION = "Textual Inversion"


class ModelDescriptor(BaseModel):
    metadata_descriptor: MetadataDescriptor = None
    filename: str = None


# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2024-09-17T00:05:47+00:00

class Image(BaseModel):
    model_config = ConfigDict(strict=False)

    url: str
    nsfwLevel: int
    width: int
    height: int
    hash: str
    type: str
    meta: Optional[dict[str, Any]]
    availability: str
    hasMeta: bool
    onSite: bool


class CivitaiModel(BaseModel):
    model_config = ConfigDict(strict=False)

    id: int
    modelId: int
    name: str
    trainedWords: List[str]
    baseModel: str
    description: Optional[str]
    images: List[Image]
