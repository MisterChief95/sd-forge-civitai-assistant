from __future__ import annotations
from pydantic import BaseModel
from typing import List, Optional, Any


# generated by datamodel-codegen


class Image(BaseModel):
    url: str
    nsfwLevel: int
    width: int
    height: int
    hash: str
    type: str
    meta: Optional[dict[str, Any]]
    availability: str
    hasMeta: bool
    onSite: bool

    def __hash__(self):
        return hash(
            (
                self.url,
                self.nsfwLevel,
                self.width,
                self.height,
                self.hash,
                self.type,
                self.availability,
                self.hasMeta,
                self.onSite,
            )
        )


class CivitaiModel(BaseModel):
    id: int
    modelId: int
    name: str
    trainedWords: List[str]
    baseModel: str
    description: Optional[str]
    images: List[Image]

    def __hash__(self):
        return hash((self.id, self.modelId, self.name, tuple(self.trainedWords), self.baseModel, self.description))
